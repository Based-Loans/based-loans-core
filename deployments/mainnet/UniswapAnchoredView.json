{
  "address": "0x058a35ba6869f16A8a6808306BD09237246f3051",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "anchorPeriod_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "anchorPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "AnchorPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "symbolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "UniswapWindowUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "symbolHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapConfig.PriceSource",
              "name": "priceSource",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "fixedPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "uniswapMarket",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isUniswapReversed",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapConfig.TokenConfig[]",
          "name": "configs",
          "type": "tuple[]"
        }
      ],
      "name": "addTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anchorPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokenIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethBaseUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "symbolHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapConfig.PriceSource",
              "name": "priceSource",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "fixedPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "uniswapMarket",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isUniswapReversed",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapConfig.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getTokenConfigByCToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "symbolHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapConfig.PriceSource",
              "name": "priceSource",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "fixedPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "uniswapMarket",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isUniswapReversed",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapConfig.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getTokenConfigBySymbol",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "symbolHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapConfig.PriceSource",
              "name": "priceSource",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "fixedPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "uniswapMarket",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isUniswapReversed",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapConfig.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbolHash",
          "type": "bytes32"
        }
      ],
      "name": "getTokenConfigBySymbolHash",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "symbolHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapConfig.PriceSource",
              "name": "priceSource",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "fixedPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "uniswapMarket",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isUniswapReversed",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapConfig.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getTokenConfigByUnderlying",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "symbolHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "baseUnit",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapConfig.PriceSource",
              "name": "priceSource",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "fixedPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "uniswapMarket",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isUniswapReversed",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapConfig.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPriceView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "newObservations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "oldObservations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "symbolHashIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "symbolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "baseUnit",
          "type": "uint256"
        },
        {
          "internalType": "enum UniswapConfig.PriceSource",
          "name": "priceSource",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "fixedPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "uniswapMarket",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isUniswapReversed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underlyingIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf65509acbf4377240bac20c77ac9fa6342f8c17fcc29ad24fed28dce7c727ba",
  "receipt": {
    "to": null,
    "from": "0x966da064E49F63D84d636D5a694038D831c75051",
    "contractAddress": "0x058a35ba6869f16A8a6808306BD09237246f3051",
    "transactionIndex": 51,
    "gasUsed": "1668079",
    "logsBloom": "0x
    "blockHash": "0x207e8a65747ecf69d925903141dddd620cf6905c3c29ff567bc9609057eb17df",
    "transactionHash": "0xdf65509acbf4377240bac20c77ac9fa6342f8c17fcc29ad24fed28dce7c727ba",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 12106667,
        "transactionHash": "0xdf65509acbf4377240bac20c77ac9fa6342f8c17fcc29ad24fed28dce7c727ba",
        "address": "0x058a35ba6869f16A8a6808306BD09237246f3051",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000966da064e49f63d84d636d5a694038d831c75051"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x207e8a65747ecf69d925903141dddd620cf6905c3c29ff567bc9609057eb17df"
      }
    ],
    "blockNumber": 12106667,
    "cumulativeGasUsed": "5323397",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1800
  ],
  "solcInputHash": "70bcce3ebfa2aac7e1b9349f7e5e9559",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPriceView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"symbolHashIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\",\"params\":{\"anchorPeriod_\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"details\":\"If a config for the cToken is not found, falls back to searching for the underlying.\",\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbol(string)\":{\"params\":{\"symbol\":\"The symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbolHash(bytes32)\":{\"params\":{\"symbolHash\":\"The keccack256 of the symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in USD, with 18 decimals, for the given cToken address\"}},\"getUnderlyingPriceView(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in USD, with 18 decimals, for the given cToken address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in USD, with 6 decimals\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(address,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigBySymbol(string)\":{\"notice\":\"Get the config for symbol\"},\"getTokenConfigBySymbolHash(bytes32)\":{\"notice\":\"Get the config for the symbolHash\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"getUnderlyingPriceView(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"newObservations(bytes32)\":{\"notice\":\"The new observation for each symbolHash\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(bytes32)\":{\"notice\":\"The old observation for each symbolHash\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapOracle/UniswapAnchoredView.sol\":\"UniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapOracle/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./UniswapConfig.sol\\\";\\nimport \\\"./UniswapLib.sol\\\";\\n\\nstruct Observation {\\n    uint timestamp;\\n    uint acc;\\n}\\n\\ncontract UniswapAnchoredView is UniswapConfig {\\n    using FixedPoint for *;\\n\\n    /// @notice The number of wei in 1 ETH\\n    uint public constant ethBaseUnit = 1e18;\\n\\n    /// @notice A common scaling factor to maintain precision\\n    uint public constant expScale = 1e18;\\n\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\n    uint public immutable anchorPeriod;\\n\\n    /// @notice Official prices by symbol hash\\n    mapping(bytes32 => uint) public prices;\\n\\n    /// @notice The old observation for each symbolHash\\n    mapping(bytes32 => Observation) public oldObservations;\\n\\n    /// @notice The new observation for each symbolHash\\n    mapping(bytes32 => Observation) public newObservations;\\n\\n    /// @notice The event emitted when the stored price is updated\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when anchor price is updated\\n    event AnchorPriceUpdated(address cToken, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\n\\n    /// @notice The event emitted when the uniswap window changes\\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\n\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\n\\n    /**\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\n     */\\n    constructor(uint anchorPeriod_) public {\\n        anchorPeriod = anchorPeriod_;\\n    }\\n\\n    function addTokens(TokenConfig[] memory configs) public onlyOwner {\\n        for (uint i = 0; i < configs.length; i++) {\\n            TokenConfig memory config = configs[i];\\n            bytes32 symbolHash = config.symbolHash;\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\n            require(newObservations[symbolHash].timestamp == uint(0), \\\"cannot change current token\\\");\\n            address uniswapMarket = config.uniswapMarket;\\n            if (config.priceSource == PriceSource.REPORTER) {\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\n                uint cumulativePrice = currentCumulativePrice(config);\\n                oldObservations[symbolHash].timestamp = block.timestamp;\\n                newObservations[symbolHash].timestamp = block.timestamp;\\n                oldObservations[symbolHash].acc = cumulativePrice;\\n                newObservations[symbolHash].acc = cumulativePrice;\\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\n            } else {\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\n            }\\n        }\\n\\n        _addTokensInternal(configs);\\n    }\\n\\n    /**\\n     * @notice Get the official price for a symbol\\n     * @param symbol The symbol to fetch the price of\\n     * @return Price denominated in USD, with 6 decimals\\n     */\\n    function price(string memory symbol) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash];\\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\\n        if (config.priceSource == PriceSource.FIXED_ETH) {\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert to dollars\\\");\\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\\n        }\\n        return 0;\\n    }\\n\\n    function priceInternal(TokenConfig memory config) internal returns (uint) {\\n        if (config.priceSource == PriceSource.REPORTER) {\\n            Observation memory newObservation = newObservations[config.symbolHash];\\n            // Update new and old observations if elapsed time is greater than or equal to anchor period\\n            uint timeElapsed = block.timestamp - newObservation.timestamp;\\n            if (timeElapsed >= anchorPeriod || prices[config.symbolHash] == 0) {\\n                postPriceInternal(config);\\n            }\\n            return prices[config.symbolHash];\\n        }\\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\\n        if (config.priceSource == PriceSource.FIXED_ETH) {\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert to dollars\\\");\\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return Price denominated in USD, with 18 decimals, for the given cToken address\\n     */\\n    function getUnderlyingPriceView(address cToken) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n        uint price;\\n        if (config.priceSource == PriceSource.REPORTER) price = prices[config.symbolHash];\\n        if (config.priceSource == PriceSource.FIXED_USD) price = config.fixedPrice;\\n        if (config.priceSource == PriceSource.FIXED_ETH) {\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert to dollars\\\");\\n            price = mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\\n        }\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\\n        return mul(1e30, price) / config.baseUnit;\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return Price denominated in USD, with 18 decimals, for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) external returns (uint) {\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\\n    }\\n\\n    function postPriceInternal(TokenConfig memory config) internal {\\n        uint ethPrice = fetchEthPrice();\\n\\n        uint anchorPrice;\\n        if (config.symbolHash == ethHash) {\\n            anchorPrice = ethPrice;\\n        } else {\\n            anchorPrice = fetchAnchorPrice(config, ethPrice);\\n        }\\n\\n        prices[config.symbolHash] = anchorPrice;\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\n     */\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\n        if (config.isUniswapReversed) {\\n            return cumulativePrice1;\\n        } else {\\n            return cumulativePrice0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\n     */\\n    function fetchEthPrice() internal returns (uint) {\\n        return fetchAnchorPrice(getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\n     */\\n    function fetchAnchorPrice(TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\n\\n        // This should be impossible, but better safe than sorry\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\n\\n        // Calculate uniswap time-weighted average price\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\n        uint anchorPrice;\\n\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\n\\n        emit AnchorPriceUpdated(config.cToken, anchorPrice, oldTimestamp, block.timestamp);\\n\\n        return anchorPrice;\\n    }\\n\\n    /**\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\n     *  Update new and old observations of lagging window if period elapsed.\\n     */\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\n        bytes32 symbolHash = config.symbolHash;\\n        uint cumulativePrice = currentCumulativePrice(config);\\n\\n        Observation memory newObservation = newObservations[symbolHash];\\n\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\n        if (timeElapsed >= anchorPeriod) {\\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\\n            oldObservations[symbolHash].acc = newObservation.acc;\\n\\n            newObservations[symbolHash].timestamp = block.timestamp;\\n            newObservations[symbolHash].acc = cumulativePrice;\\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\n        }\\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\\n    }\\n\\n    /// @dev Overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x382f868e9ed01a30bca7a9b0312ee69da077116efef008c4ee25960fa0f85e53\",\"license\":\"MIT\"},\"contracts/UniswapOracle/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig is Ownable {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER   /// implies the price is set by the reporter\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address cToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    mapping(uint => TokenConfig) public tokens;\\n    mapping(address => uint) public cTokenIndex;\\n    mapping(address => uint) public underlyingIndex;\\n    mapping(bytes32 => uint) public symbolHashIndex;\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public numTokens;\\n\\n    function _addTokensInternal(TokenConfig[] memory configs) internal {\\n        for (uint i = 0; i < configs.length; i++) {\\n            uint index = i + numTokens;\\n            tokens[index] = configs[i];\\n            cTokenIndex[configs[i].cToken] = index;\\n            underlyingIndex[configs[i].underlying] = index;\\n            symbolHashIndex[configs[i].symbolHash] = index;\\n        }\\n\\n        numTokens = numTokens + configs.length;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        return cTokenIndex[cToken];\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        return underlyingIndex[underlying];\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        return symbolHashIndex[symbolHash];\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n\\n        return tokens[i];\\n    }\\n\\n    /**\\n     * @notice Get the config for symbol\\n     * @param symbol The symbol of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    /**\\n     * @notice Get the config for the symbolHash\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7d6fb1d6b4c2892633f92815881a0163e26658775644525a4be83a96a4071d37\",\"license\":\"MIT\"},\"contracts/UniswapOracle/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.10;\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6301c2ba878b5dcda9a2a3a70304d1bb8225c7f69fa4fff0ff144152d3351ef\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162001d9438038062001d9483398101604081905261003191610091565b600061003b61008d565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506080526100a9565b3390565b6000602082840312156100a2578081fd5b5051919050565b608051611cc6620000ce600039806109845280610eb152806114125250611cc66000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063d1b353b41161007c578063d1b353b414610244578063e9206d78146102bd578063eaa1c2ca146102c5578063f2fde38b146102d8578063fc57d4df146102eb578063fe2c6198146102fe5761014d565b8063715018a61461025f5780638a003888146102675780638da5cb5b1461027a5780638e499bcf1461028f57806395acbb39146102975780639f599631146102aa5761014d565b80634da21942116101155780634da21942146101e45780634f64b2be146101f75780635d5c06be1461021e57806360846bc61461023157806369aa3ac6146102445780636f3aa01d1461024c5761014d565b80630d66ba22146101525780631a125204146101675780631f93ab7914610190578063276c2cba146101b057806337c0e12d146101c3575b600080fd5b610165610160366004611658565b610311565b005b61017a610175366004611709565b6104df565b6040516101879190611b91565b60405180910390f35b6101a361019e366004611620565b61052b565b6040516101879190611c02565b61017a6101be366004611721565b61053d565b6101d66101d1366004611709565b61057a565b604051610187929190611c0b565b61017a6101f2366004611620565b610593565b61020a610205366004611709565b6105a6565b604051610187989796959493929190611872565b6101a361022c366004611620565b610602565b6101a361023f366004611709565b610614565b6101a3610626565b6101a361025a366004611620565b610632565b610165610757565b61017a610275366004611709565b6107e0565b6102826108b9565b604051610187919061185e565b6101a36108c8565b6101a36102a5366004611709565b6108ce565b61017a6102b8366004611620565b6108e0565b6101a3610982565b6101d66102d3366004611709565b6109a6565b6101656102e6366004611620565b6109bf565b6101a36102f9366004611620565b610a7f565b6101a361030c366004611721565b610ac7565b610319610bd5565b6001600160a01b031661032a6108b9565b6001600160a01b0316146103595760405162461bcd60e51b815260040161035090611a93565b60405180910390fd5b60005b81518110156104d25761036d6114ea565b82828151811061037957fe5b6020026020010151905060008160400151905060008260600151116103b05760405162461bcd60e51b815260040161035090611970565b600081815260086020526040902054156103dc5760405162461bcd60e51b8152600401610350906118f3565b60c08201516002836080015160028111156103f357fe5b14156104a0576001600160a01b03811661041f5760405162461bcd60e51b8152600401610350906119b2565b600061042a84610bd9565b600084815260076020908152604080832042808255600890935292819020828155600193840185905592909201839055905191925084917fe37d39315e3419c0937360f1ac88f2c52ecf67e3b22b367f82047ddb4591904a9161049291819086908190611c19565b60405180910390a2506104c7565b6001600160a01b038116156104c75760405162461bcd60e51b815260040161035090611b4b565b50505060010161035c565b506104dc81610c0b565b50565b6104e76114ea565b60006104f283610dd8565b9050600019811461050e57610506816107e0565b915050610526565b60405162461bcd60e51b815260040161035090611a2c565b919050565b60036020526000908152604090205481565b6105456114ea565b610574826040516020016105599190611816565b604051602081830303815290604052805190602001206104df565b92915050565b6007602052600090815260409020805460019091015482565b61059b6114ea565b60006104f283610dea565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006909501546001600160a01b0396871696948516959394929360ff92831693909290821691600160a01b90041688565b60026020526000908152604090205481565b60066020526000908152604090205481565b670de0b6b3a764000081565b600061063c6114ea565b610645836108e0565b9050600060028260800151600281111561065b57fe5b141561067557506040808201516000908152600660205220545b60018260800151600281111561068757fe5b1415610694575060a08101515b6000826080015160028111156106a657fe5b141561072b576000600660006040516020016106c19061184f565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107085760405162461bcd60e51b815260040161035090611ac8565b670de0b6b3a764000061071f828560a00151610e05565b8161072657fe5b049150505b81606001516107476c0c9f2c9cd04674edea4000000083610e05565b8161074e57fe5b04949350505050565b61075f610bd5565b6001600160a01b03166107706108b9565b6001600160a01b0316146107965760405162461bcd60e51b815260040161035090611a93565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6107e86114ea565b60055482106108095760405162461bcd60e51b815260040161035090611a2c565b60008281526001602081815260409283902083516101008101855281546001600160a01b03908116825293820154909316918301919091526002808201549383019390935260038101546060830152600481015491929091608084019160ff9091169081111561087557fe5b600281111561088057fe5b8152600582015460208201526006909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b6000546001600160a01b031690565b60055481565b60046020526000908152604090205481565b6108e86114ea565b60006108f383610e3f565b9050600019811461090757610506816107e0565b61097b836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f2919061163c565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6008602052600090815260409020805460019091015482565b6109c7610bd5565b6001600160a01b03166109d86108b9565b6001600160a01b0316146109fe5760405162461bcd60e51b815260040161035090611a93565b6001600160a01b038116610a245760405162461bcd60e51b81526004016103509061192a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a896114ea565b610a92836108e0565b90508060600151610ab86c0c9f2c9cd04674edea40000000610ab384610e5a565b610e05565b81610abf57fe5b049392505050565b6000610ad16114ea565b610ada8361053d565b9050600281608001516002811115610aee57fe5b1415610b0d576040908101516000908152600660205220549050610526565b600181608001516002811115610b1f57fe5b1415610b305760a001519050610526565b600081608001516002811115610b4257fe5b1415610bcc57600060066000604051602001610b5d9061184f565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008111610ba45760405162461bcd60e51b815260040161035090611ac8565b670de0b6b3a7640000610bbb828460a00151610e05565b81610bc257fe5b0492505050610526565b50600092915050565b3390565b6000806000610beb8460c00151610fd3565b50915091508360e0015115610c035791506105269050565b509050610526565b60005b8151811015610dcb57600060055482019050828281518110610c2c57fe5b60209081029190910181015160008381526001808452604091829020835181546001600160a01b03199081166001600160a01b03928316178355958501518284018054909716911617909455908201516002808501919091556060830151600385015560808301516004850180549495949193909260ff19909216918490811115610cb357fe5b021790555060a0820151600582015560c08201516006909101805460e0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905582518190600290600090869086908110610d1d57fe5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020819055508060036000858581518110610d5e57fe5b6020026020010151602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055508060046000858581518110610d9f57fe5b602002602001015160400151815260200190815260200160002081905550508080600101915050610c0e565b5051600580549091019055565b60009081526004602052604090205490565b6001600160a01b031660009081526003602052604090205490565b600082610e1457506000610574565b82820282848281610e2157fe5b041461097b5760405162461bcd60e51b8152600401610350906119f5565b6001600160a01b031660009081526002602052604090205490565b6000600282608001516002811115610e6e57fe5b1415610f1557610e7c61152f565b5060408083015160009081526008602090815290829020825180840190935280548084526001909101549183019190915242037f000000000000000000000000000000000000000000000000000000000000000081101580610eed5750604080850151600090815260066020522054155b15610efb57610efb846111a8565b505050604080820151600090815260066020522054610526565b600182608001516002811115610f2757fe5b1415610f38575060a0810151610526565b600082608001516002811115610f4a57fe5b141561052657600060066000604051602001610f659061184f565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008111610fac5760405162461bcd60e51b815260040161035090611ac8565b670de0b6b3a7640000610fc3828560a00151610e05565b81610fca57fe5b04915050610526565b6000806000610fe0611215565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105391906117fe565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c691906117fe565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561110657600080fd5b505afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e91906117aa565b9250925092508363ffffffff168163ffffffff161461119e5780840363ffffffff811661116b848661121f565b516001600160e01b031602969096019563ffffffff811661118c858561121f565b516001600160e01b0316029590950194505b5050509193909250565b60006111b261129a565b905060006040516020016111c59061184f565b60405160208183030381529060405280519060200120836040015114156111ed5750806111fa565b6111f783836112c4565b90505b60409283015160009081526006602052929092209190915550565b63ffffffff421690565b611227611549565b6000826001600160701b0316116112505760405162461bcd60e51b815260040161035090611b14565b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b168161128557fe5b046001600160e01b0316815250905092915050565b60006112bf6112b16040516020016105599061184f565b670de0b6b3a76400006112c4565b905090565b6000806000806112d3866113bf565b9250925092508042116112f85760405162461bcd60e51b815260040161035090611a5c565b42819003611304611549565b6040518060200160405280838688038161131a57fe5b046001600160e01b031681525090506000611334826114d2565b90506000611342828a610e05565b90506000670de0b6b3a76400008061135e848e60600151610e05565b8161136557fe5b048161136d57fe5b0490507f7d881580fb2bb7844e8ecf8df26510247c4bbea2735d40bf0d9ac33c0d9acd818b600001518288426040516113a994939291906118cd565b60405180910390a19a9950505050505050505050565b6000806000808460400151905060006113d786610bd9565b90506113e161152f565b50600082815260086020908152604091829020825180840190935280548084526001909101549183019190915242037f000000000000000000000000000000000000000000000000000000000000000081106114ad578151600085815260076020908152604080832093845581860180516001958601556008909252918290204280825593018690558a82015185519151925190937fe37d39315e3419c0937360f1ac88f2c52ecf67e3b22b367f82047ddb4591904a936114a493928990611c19565b60405180910390a25b5050600091825260076020526040909120600181015490549196909550909350915050565b516612725dd1d243ab6001600160e01b039091160490565b60408051610100810182526000808252602082018190529181018290526060810182905290608082019081526000602082018190526040820181905260609091015290565b604051806040016040528060008152602001600081525090565b60408051602081019091526000815290565b803561057481611c66565b8035801515811461057457600080fd5b80356003811061057457600080fd5b6000610100808385031215611598578182fd5b6115a181611c34565b91505081356115af81611c66565b815260208201356115bf81611c66565b8060208301525060408201356040820152606082013560608201526115e78360808401611576565b608082015260a082013560a08201526116038360c0840161155b565b60c08201526116158360e08401611566565b60e082015292915050565b600060208284031215611631578081fd5b813561097b81611c66565b60006020828403121561164d578081fd5b815161097b81611c66565b6000602080838503121561166a578182fd5b823567ffffffffffffffff80821115611681578384fd5b818501915085601f830112611694578384fd5b8135818111156116a2578485fd5b6116af8485830201611c34565b8181528481019250838501610100808402860187018a10156116cf578788fd5b8795505b838610156116fb576116e58a83611585565b85526001959095019493860193908101906116d3565b509098975050505050505050565b60006020828403121561171a578081fd5b5035919050565b60006020808385031215611733578182fd5b823567ffffffffffffffff8082111561174a578384fd5b818501915085601f83011261175d578384fd5b81358181111561176b578485fd5b61177d601f8201601f19168501611c34565b91508082528684828501011115611792578485fd5b80848401858401378101909201929092529392505050565b6000806000606084860312156117be578182fd5b83516117c981611c7b565b60208501519093506117da81611c7b565b604085015190925063ffffffff811681146117f3578182fd5b809150509250925092565b60006020828403121561180f578081fd5b5051919050565b60008251815b81811015611836576020818601810151858301520161181c565b818111156118445782828501525b509190910192915050565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b038981168252888116602083015260408201889052606082018790526101008201906118a487611c5b565b60808401528560a084015280851660c08401525082151560e08301529998505050505050505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6020808252601b908201527f63616e6e6f74206368616e67652063757272656e7420746f6b656e0000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526023908201527f7265706f7274656420707269636573206d757374206861766520616e20616e636040820152623437b960e91b606082015260800190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b6020808252601a908201527f6e6f77206d75737420636f6d65206166746572206265666f7265000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f455448207072696365206e6f74207365742c2063616e6e6f7420636f6e76657260408201526b7420746f20646f6c6c61727360a01b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b60208082526026908201527f6f6e6c79207265706f7274656420707269636573207574696c697a6520616e2060408201526530b731b437b960d11b606082015260800190565b60006101008201905060018060a01b038084511683528060208501511660208401526040840151604084015260608401516060840152611bd46080850151611c5b565b608084015260a084015160a08401528060c08501511660c08401525060e0830151151560e083015292915050565b90815260200190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611c5357600080fd5b604052919050565b806003811061052657fe5b6001600160a01b03811681146104dc57600080fd5b6001600160701b03811681146104dc57600080fdfea2646970667358221220d2a0f99cea451c9564dee516b1dd7836758a53f8984afd1f9d7d2eb6de8b390c64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063d1b353b41161007c578063d1b353b414610244578063e9206d78146102bd578063eaa1c2ca146102c5578063f2fde38b146102d8578063fc57d4df146102eb578063fe2c6198146102fe5761014d565b8063715018a61461025f5780638a003888146102675780638da5cb5b1461027a5780638e499bcf1461028f57806395acbb39146102975780639f599631146102aa5761014d565b80634da21942116101155780634da21942146101e45780634f64b2be146101f75780635d5c06be1461021e57806360846bc61461023157806369aa3ac6146102445780636f3aa01d1461024c5761014d565b80630d66ba22146101525780631a125204146101675780631f93ab7914610190578063276c2cba146101b057806337c0e12d146101c3575b600080fd5b610165610160366004611658565b610311565b005b61017a610175366004611709565b6104df565b6040516101879190611b91565b60405180910390f35b6101a361019e366004611620565b61052b565b6040516101879190611c02565b61017a6101be366004611721565b61053d565b6101d66101d1366004611709565b61057a565b604051610187929190611c0b565b61017a6101f2366004611620565b610593565b61020a610205366004611709565b6105a6565b604051610187989796959493929190611872565b6101a361022c366004611620565b610602565b6101a361023f366004611709565b610614565b6101a3610626565b6101a361025a366004611620565b610632565b610165610757565b61017a610275366004611709565b6107e0565b6102826108b9565b604051610187919061185e565b6101a36108c8565b6101a36102a5366004611709565b6108ce565b61017a6102b8366004611620565b6108e0565b6101a3610982565b6101d66102d3366004611709565b6109a6565b6101656102e6366004611620565b6109bf565b6101a36102f9366004611620565b610a7f565b6101a361030c366004611721565b610ac7565b610319610bd5565b6001600160a01b031661032a6108b9565b6001600160a01b0316146103595760405162461bcd60e51b815260040161035090611a93565b60405180910390fd5b60005b81518110156104d25761036d6114ea565b82828151811061037957fe5b6020026020010151905060008160400151905060008260600151116103b05760405162461bcd60e51b815260040161035090611970565b600081815260086020526040902054156103dc5760405162461bcd60e51b8152600401610350906118f3565b60c08201516002836080015160028111156103f357fe5b14156104a0576001600160a01b03811661041f5760405162461bcd60e51b8152600401610350906119b2565b600061042a84610bd9565b600084815260076020908152604080832042808255600890935292819020828155600193840185905592909201839055905191925084917fe37d39315e3419c0937360f1ac88f2c52ecf67e3b22b367f82047ddb4591904a9161049291819086908190611c19565b60405180910390a2506104c7565b6001600160a01b038116156104c75760405162461bcd60e51b815260040161035090611b4b565b50505060010161035c565b506104dc81610c0b565b50565b6104e76114ea565b60006104f283610dd8565b9050600019811461050e57610506816107e0565b915050610526565b60405162461bcd60e51b815260040161035090611a2c565b919050565b60036020526000908152604090205481565b6105456114ea565b610574826040516020016105599190611816565b604051602081830303815290604052805190602001206104df565b92915050565b6007602052600090815260409020805460019091015482565b61059b6114ea565b60006104f283610dea565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006909501546001600160a01b0396871696948516959394929360ff92831693909290821691600160a01b90041688565b60026020526000908152604090205481565b60066020526000908152604090205481565b670de0b6b3a764000081565b600061063c6114ea565b610645836108e0565b9050600060028260800151600281111561065b57fe5b141561067557506040808201516000908152600660205220545b60018260800151600281111561068757fe5b1415610694575060a08101515b6000826080015160028111156106a657fe5b141561072b576000600660006040516020016106c19061184f565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107085760405162461bcd60e51b815260040161035090611ac8565b670de0b6b3a764000061071f828560a00151610e05565b8161072657fe5b049150505b81606001516107476c0c9f2c9cd04674edea4000000083610e05565b8161074e57fe5b04949350505050565b61075f610bd5565b6001600160a01b03166107706108b9565b6001600160a01b0316146107965760405162461bcd60e51b815260040161035090611a93565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6107e86114ea565b60055482106108095760405162461bcd60e51b815260040161035090611a2c565b60008281526001602081815260409283902083516101008101855281546001600160a01b03908116825293820154909316918301919091526002808201549383019390935260038101546060830152600481015491929091608084019160ff9091169081111561087557fe5b600281111561088057fe5b8152600582015460208201526006909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b6000546001600160a01b031690565b60055481565b60046020526000908152604090205481565b6108e86114ea565b60006108f383610e3f565b9050600019811461090757610506816107e0565b61097b836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f2919061163c565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6008602052600090815260409020805460019091015482565b6109c7610bd5565b6001600160a01b03166109d86108b9565b6001600160a01b0316146109fe5760405162461bcd60e51b815260040161035090611a93565b6001600160a01b038116610a245760405162461bcd60e51b81526004016103509061192a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a896114ea565b610a92836108e0565b90508060600151610ab86c0c9f2c9cd04674edea40000000610ab384610e5a565b610e05565b81610abf57fe5b049392505050565b6000610ad16114ea565b610ada8361053d565b9050600281608001516002811115610aee57fe5b1415610b0d576040908101516000908152600660205220549050610526565b600181608001516002811115610b1f57fe5b1415610b305760a001519050610526565b600081608001516002811115610b4257fe5b1415610bcc57600060066000604051602001610b5d9061184f565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008111610ba45760405162461bcd60e51b815260040161035090611ac8565b670de0b6b3a7640000610bbb828460a00151610e05565b81610bc257fe5b0492505050610526565b50600092915050565b3390565b6000806000610beb8460c00151610fd3565b50915091508360e0015115610c035791506105269050565b509050610526565b60005b8151811015610dcb57600060055482019050828281518110610c2c57fe5b60209081029190910181015160008381526001808452604091829020835181546001600160a01b03199081166001600160a01b03928316178355958501518284018054909716911617909455908201516002808501919091556060830151600385015560808301516004850180549495949193909260ff19909216918490811115610cb357fe5b021790555060a0820151600582015560c08201516006909101805460e0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905582518190600290600090869086908110610d1d57fe5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020819055508060036000858581518110610d5e57fe5b6020026020010151602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055508060046000858581518110610d9f57fe5b602002602001015160400151815260200190815260200160002081905550508080600101915050610c0e565b5051600580549091019055565b60009081526004602052604090205490565b6001600160a01b031660009081526003602052604090205490565b600082610e1457506000610574565b82820282848281610e2157fe5b041461097b5760405162461bcd60e51b8152600401610350906119f5565b6001600160a01b031660009081526002602052604090205490565b6000600282608001516002811115610e6e57fe5b1415610f1557610e7c61152f565b5060408083015160009081526008602090815290829020825180840190935280548084526001909101549183019190915242037f000000000000000000000000000000000000000000000000000000000000000081101580610eed5750604080850151600090815260066020522054155b15610efb57610efb846111a8565b505050604080820151600090815260066020522054610526565b600182608001516002811115610f2757fe5b1415610f38575060a0810151610526565b600082608001516002811115610f4a57fe5b141561052657600060066000604051602001610f659061184f565b60405160208183030381529060405280519060200120815260200190815260200160002054905060008111610fac5760405162461bcd60e51b815260040161035090611ac8565b670de0b6b3a7640000610fc3828560a00151610e05565b81610fca57fe5b04915050610526565b6000806000610fe0611215565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105391906117fe565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c691906117fe565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561110657600080fd5b505afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e91906117aa565b9250925092508363ffffffff168163ffffffff161461119e5780840363ffffffff811661116b848661121f565b516001600160e01b031602969096019563ffffffff811661118c858561121f565b516001600160e01b0316029590950194505b5050509193909250565b60006111b261129a565b905060006040516020016111c59061184f565b60405160208183030381529060405280519060200120836040015114156111ed5750806111fa565b6111f783836112c4565b90505b60409283015160009081526006602052929092209190915550565b63ffffffff421690565b611227611549565b6000826001600160701b0316116112505760405162461bcd60e51b815260040161035090611b14565b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b168161128557fe5b046001600160e01b0316815250905092915050565b60006112bf6112b16040516020016105599061184f565b670de0b6b3a76400006112c4565b905090565b6000806000806112d3866113bf565b9250925092508042116112f85760405162461bcd60e51b815260040161035090611a5c565b42819003611304611549565b6040518060200160405280838688038161131a57fe5b046001600160e01b031681525090506000611334826114d2565b90506000611342828a610e05565b90506000670de0b6b3a76400008061135e848e60600151610e05565b8161136557fe5b048161136d57fe5b0490507f7d881580fb2bb7844e8ecf8df26510247c4bbea2735d40bf0d9ac33c0d9acd818b600001518288426040516113a994939291906118cd565b60405180910390a19a9950505050505050505050565b6000806000808460400151905060006113d786610bd9565b90506113e161152f565b50600082815260086020908152604091829020825180840190935280548084526001909101549183019190915242037f000000000000000000000000000000000000000000000000000000000000000081106114ad578151600085815260076020908152604080832093845581860180516001958601556008909252918290204280825593018690558a82015185519151925190937fe37d39315e3419c0937360f1ac88f2c52ecf67e3b22b367f82047ddb4591904a936114a493928990611c19565b60405180910390a25b5050600091825260076020526040909120600181015490549196909550909350915050565b516612725dd1d243ab6001600160e01b039091160490565b60408051610100810182526000808252602082018190529181018290526060810182905290608082019081526000602082018190526040820181905260609091015290565b604051806040016040528060008152602001600081525090565b60408051602081019091526000815290565b803561057481611c66565b8035801515811461057457600080fd5b80356003811061057457600080fd5b6000610100808385031215611598578182fd5b6115a181611c34565b91505081356115af81611c66565b815260208201356115bf81611c66565b8060208301525060408201356040820152606082013560608201526115e78360808401611576565b608082015260a082013560a08201526116038360c0840161155b565b60c08201526116158360e08401611566565b60e082015292915050565b600060208284031215611631578081fd5b813561097b81611c66565b60006020828403121561164d578081fd5b815161097b81611c66565b6000602080838503121561166a578182fd5b823567ffffffffffffffff80821115611681578384fd5b818501915085601f830112611694578384fd5b8135818111156116a2578485fd5b6116af8485830201611c34565b8181528481019250838501610100808402860187018a10156116cf578788fd5b8795505b838610156116fb576116e58a83611585565b85526001959095019493860193908101906116d3565b509098975050505050505050565b60006020828403121561171a578081fd5b5035919050565b60006020808385031215611733578182fd5b823567ffffffffffffffff8082111561174a578384fd5b818501915085601f83011261175d578384fd5b81358181111561176b578485fd5b61177d601f8201601f19168501611c34565b91508082528684828501011115611792578485fd5b80848401858401378101909201929092529392505050565b6000806000606084860312156117be578182fd5b83516117c981611c7b565b60208501519093506117da81611c7b565b604085015190925063ffffffff811681146117f3578182fd5b809150509250925092565b60006020828403121561180f578081fd5b5051919050565b60008251815b81811015611836576020818601810151858301520161181c565b818111156118445782828501525b509190910192915050565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b038981168252888116602083015260408201889052606082018790526101008201906118a487611c5b565b60808401528560a084015280851660c08401525082151560e08301529998505050505050505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6020808252601b908201527f63616e6e6f74206368616e67652063757272656e7420746f6b656e0000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526023908201527f7265706f7274656420707269636573206d757374206861766520616e20616e636040820152623437b960e91b606082015260800190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b6020808252601a908201527f6e6f77206d75737420636f6d65206166746572206265666f7265000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f455448207072696365206e6f74207365742c2063616e6e6f7420636f6e76657260408201526b7420746f20646f6c6c61727360a01b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b60208082526026908201527f6f6e6c79207265706f7274656420707269636573207574696c697a6520616e2060408201526530b731b437b960d11b606082015260800190565b60006101008201905060018060a01b038084511683528060208501511660208401526040840151604084015260608401516060840152611bd46080850151611c5b565b608084015260a084015160a08401528060c08501511660c08401525060e0830151151560e083015292915050565b90815260200190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611c5357600080fd5b604052919050565b806003811061052657fe5b6001600160a01b03811681146104dc57600080fd5b6001600160701b03811681146104dc57600080fdfea2646970667358221220d2a0f99cea451c9564dee516b1dd7836758a53f8984afd1f9d7d2eb6de8b390c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.",
        "params": {
          "anchorPeriod_": "The minimum amount of time required for the old uniswap price accumulator to be replaced"
        }
      },
      "getTokenConfig(uint256)": {
        "params": {
          "i": "The index of the config to get"
        },
        "returns": {
          "_0": "The config object"
        }
      },
      "getTokenConfigByCToken(address)": {
        "details": "If a config for the cToken is not found, falls back to searching for the underlying.",
        "params": {
          "cToken": "The address of the cToken of the config to get"
        },
        "returns": {
          "_0": "The config object"
        }
      },
      "getTokenConfigBySymbol(string)": {
        "params": {
          "symbol": "The symbol of the config to get"
        },
        "returns": {
          "_0": "The config object"
        }
      },
      "getTokenConfigBySymbolHash(bytes32)": {
        "params": {
          "symbolHash": "The keccack256 of the symbol of the config to get"
        },
        "returns": {
          "_0": "The config object"
        }
      },
      "getTokenConfigByUnderlying(address)": {
        "params": {
          "underlying": "The address of the underlying asset of the config to get"
        },
        "returns": {
          "_0": "The config object"
        }
      },
      "getUnderlyingPrice(address)": {
        "details": "Implements the PriceOracle interface for Compound v2.",
        "params": {
          "cToken": "The cToken address for price retrieval"
        },
        "returns": {
          "_0": "Price denominated in USD, with 18 decimals, for the given cToken address"
        }
      },
      "getUnderlyingPriceView(address)": {
        "details": "Implements the PriceOracle interface for Compound v2.",
        "params": {
          "cToken": "The cToken address for price retrieval"
        },
        "returns": {
          "_0": "Price denominated in USD, with 18 decimals, for the given cToken address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "price(string)": {
        "params": {
          "symbol": "The symbol to fetch the price of"
        },
        "returns": {
          "_0": "Price denominated in USD, with 6 decimals"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AnchorPriceUpdated(address,uint256,uint256,uint256)": {
        "notice": "The event emitted when anchor price is updated"
      },
      "PriceUpdated(string,uint256)": {
        "notice": "The event emitted when the stored price is updated"
      },
      "UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "The event emitted when the uniswap window changes"
      }
    },
    "kind": "user",
    "methods": {
      "anchorPeriod()": {
        "notice": "The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced"
      },
      "constructor": "Construct a uniswap anchored view for a set of token configurations",
      "ethBaseUnit()": {
        "notice": "The number of wei in 1 ETH"
      },
      "expScale()": {
        "notice": "A common scaling factor to maintain precision"
      },
      "getTokenConfig(uint256)": {
        "notice": "Get the i-th config, according to the order they were passed in originally"
      },
      "getTokenConfigByCToken(address)": {
        "notice": "Get the config for the cToken"
      },
      "getTokenConfigBySymbol(string)": {
        "notice": "Get the config for symbol"
      },
      "getTokenConfigBySymbolHash(bytes32)": {
        "notice": "Get the config for the symbolHash"
      },
      "getTokenConfigByUnderlying(address)": {
        "notice": "Get the config for an underlying asset"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Get the underlying price of a cToken"
      },
      "getUnderlyingPriceView(address)": {
        "notice": "Get the underlying price of a cToken"
      },
      "newObservations(bytes32)": {
        "notice": "The new observation for each symbolHash"
      },
      "numTokens()": {
        "notice": "The number of tokens this contract actually supports"
      },
      "oldObservations(bytes32)": {
        "notice": "The old observation for each symbolHash"
      },
      "price(string)": {
        "notice": "Get the official price for a symbol"
      },
      "prices(bytes32)": {
        "notice": "Official prices by symbol hash"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1274,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 834,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(TokenConfig)830_storage)"
      },
      {
        "astId": 838,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "cTokenIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 842,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "underlyingIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 846,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "symbolHashIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 849,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "numTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 29,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "prices",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 34,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "oldObservations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Observation)9_storage)"
      },
      {
        "astId": 39,
        "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
        "label": "newObservations",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Observation)9_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(PriceSource)813": {
        "encoding": "inplace",
        "label": "enum UniswapConfig.PriceSource",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Observation)9_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Observation)",
        "numberOfBytes": "32",
        "value": "t_struct(Observation)9_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenConfig)830_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UniswapConfig.TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)830_storage"
      },
      "t_struct(Observation)9_storage": {
        "encoding": "inplace",
        "label": "struct Observation",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "acc",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenConfig)830_storage": {
        "encoding": "inplace",
        "label": "struct UniswapConfig.TokenConfig",
        "members": [
          {
            "astId": 815,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "cToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 817,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 819,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "symbolHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 821,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "baseUnit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 823,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "priceSource",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(PriceSource)813"
          },
          {
            "astId": 825,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "fixedPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 827,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "uniswapMarket",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 829,
            "contract": "contracts/UniswapOracle/UniswapAnchoredView.sol:UniswapAnchoredView",
            "label": "isUniswapReversed",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}