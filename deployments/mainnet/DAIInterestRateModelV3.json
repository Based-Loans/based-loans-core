{
  "address": "0x7ef691D3A0f8a8706c2F55687f86745870370870",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pot_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jug_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpMultiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kink",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "assumedOneMinusReserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "baseRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "blocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "dsrPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "gapPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "jumpMultiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "multiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "poke",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gapPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        }
      ],
      "name": "updateJumpRateModel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7488b2d89b42e4b53aaeecb8b24beac5e1286a409156610f1bd61fc573555e09",
  "receipt": {
    "to": null,
    "from": "0x966da064E49F63D84d636D5a694038D831c75051",
    "contractAddress": "0x7ef691D3A0f8a8706c2F55687f86745870370870",
    "transactionIndex": 96,
    "gasUsed": "871100",
    "logsBloom": "0x
    "blockHash": "0xfd5464950a3291e14d0b96ca5c0bc0ad25a4fcfc15e89f172d906900c611bc7d",
    "transactionHash": "0x7488b2d89b42e4b53aaeecb8b24beac5e1286a409156610f1bd61fc573555e09",
    "logs": [
      {
        "transactionIndex": 96,
        "blockNumber": 11735316,
        "transactionHash": "0x7488b2d89b42e4b53aaeecb8b24beac5e1286a409156610f1bd61fc573555e09",
        "address": "0x7ef691D3A0f8a8706c2F55687f86745870370870",
        "topics": [
          "0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078b654fe360000000000000000000000000000000000000000000000000b1a2bc2ec500000",
        "logIndex": 317,
        "blockHash": "0xfd5464950a3291e14d0b96ca5c0bc0ad25a4fcfc15e89f172d906900c611bc7d"
      },
      {
        "transactionIndex": 96,
        "blockNumber": 11735316,
        "transactionHash": "0x7488b2d89b42e4b53aaeecb8b24beac5e1286a409156610f1bd61fc573555e09",
        "address": "0x7ef691D3A0f8a8706c2F55687f86745870370870",
        "topics": [
          "0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4cabea9100000000000000000000000000000000000000000000000000000078b654fe360000000000000000000000000000000000000000000000000b1a2bc2ec500000",
        "logIndex": 318,
        "blockHash": "0xfd5464950a3291e14d0b96ca5c0bc0ad25a4fcfc15e89f172d906900c611bc7d"
      }
    ],
    "blockNumber": 11735316,
    "cumulativeGasUsed": "10205607",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1090000000000000000",
    "800000000000000000",
    "0x197e90f9fad81970ba7976f33cbd77088e5d7cf7",
    "0x19c0976f590d67707e62397c87829d896dc0f1f1",
    "0x966da064E49F63D84d636D5a694038D831c75051"
  ],
  "solcInputHash": "f1489d28ea8ad9f525fc75f73fce772c",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jug_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"assumedOneMinusReserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dsrPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gapPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"poke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gapPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"name\":\"updateJumpRateModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound (modified by Dharma Labs)\",\"methods\":{\"constructor\":{\"params\":{\"jug_\":\"The address of the Dai jug (where SF is kept)\",\"jumpMultiplierPerYear\":\"The multiplierPerBlock after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\",\"owner_\":\"The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\",\"pot_\":\"The address of the Dai pot (where DSR is earned)\"}},\"dsrPerBlock()\":{\"return\":\"The Dai savings rate per block (as a percentage, and scaled by 1e18)\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"return\":\"The borrow rate percentage per block as a mantissa (scaled by 1e18)\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The total amount of borrows the market has outstanding\",\"cash\":\"The total amount of cash the market has\",\"reserveFactorMantissa\":\"The current reserve factor the market has\",\"reserves\":\"The total amnount of reserves the market has\"},\"return\":\"The supply rate per block (as a percentage, and scaled by 1e18)\"},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by 1e18). For DAI, this is calculated from DSR and SF. Input not used.\",\"gapPerYear\":\"The Additional margin per year separating the base borrow rate from the roof. (scaled by 1e18)\",\"jumpMultiplierPerYear\":\"The jumpMultiplierPerYear after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\"}},\"utilizationRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"return\":\"The utilization rate as a mantissa between [0, 1e18]\"}},\"title\":\"Compound's DAIInterestRateModel Contract (version 3)\"},\"userdoc\":{\"methods\":{\"constructor\":\"Construct an interest rate model\",\"dsrPerBlock()\":{\"notice\":\"Calculates the Dai savings rate per block\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per block\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply interest rate per block including the Dai savings rate\"},\"poke()\":{\"notice\":\"Resets the baseRate and multiplier per block based on the stability fee and Dai savings rate\"},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"notice\":\"External function to update the parameters of the interest rate model\"},\"utilizationRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\"}},\"notice\":\"The parameterized model described in section 2.4 of the original Compound Protocol whitepaper. Version 3 modifies the interest rate model in Version 2 by increasing the initial \\\"gap\\\" or slope of the model prior to the \\\"kink\\\" from 2% to 4%, and enabling updateable parameters.\"}},\"settings\":{\"compilationTarget\":{\"contracts/DAIInterestRateModelV3.sol\":\"DAIInterestRateModelV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BaseJumpRateModelV2.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n  * @title Logic for Compound's JumpRateModel Contract V2.\\n  * @author Compound (modified by Dharma Labs, refactored by Arr00)\\n  * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n  */\\ncontract BaseJumpRateModelV2 {\\n    using SafeMath for uint;\\n\\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\\n\\n    /**\\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\n     */\\n    address public owner;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint public constant blocksPerYear = 2102400;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint public kink;\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\\n     */\\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) internal {\\n        owner = owner_;\\n\\n        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) external {\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\n     */\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\\n        uint util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n        } else {\\n            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n            uint excessUtil = util.sub(kink);\\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\\n        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n}\\n\",\"keccak256\":\"0xd6bf974b9a7f0d26cf04cac3dabefe81b14cdcf5b99743fc9711086c889a30de\"},\"contracts/DAIInterestRateModelV3.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./JumpRateModelV2.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n  * @title Compound's DAIInterestRateModel Contract (version 3)\\n  * @author Compound (modified by Dharma Labs)\\n  * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper.\\n  * Version 3 modifies the interest rate model in Version 2 by increasing the initial \\\"gap\\\" or slope of\\n  * the model prior to the \\\"kink\\\" from 2% to 4%, and enabling updateable parameters.\\n  */\\ncontract DAIInterestRateModelV3 is JumpRateModelV2 {\\n    using SafeMath for uint;\\n\\n    /**\\n     * @notice The additional margin per block separating the base borrow rate from the roof.\\n     */\\n    uint public gapPerBlock;\\n\\n    /**\\n     * @notice The assumed (1 - reserve factor) used to calculate the minimum borrow rate (reserve factor = 0.05)\\n     */\\n    uint public constant assumedOneMinusReserveFactorMantissa = 0.95e18;\\n\\n    PotLike pot;\\n    JugLike jug;\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param pot_ The address of the Dai pot (where DSR is earned)\\n     * @param jug_ The address of the Dai jug (where SF is kept)\\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\\n     */\\n    constructor(uint jumpMultiplierPerYear, uint kink_, address pot_, address jug_, address owner_) JumpRateModelV2(0, 0, jumpMultiplierPerYear, kink_, owner_) public {\\n        gapPerBlock = 4e16 / blocksPerYear;\\n        pot = PotLike(pot_);\\n        jug = JugLike(jug_);\\n        poke();\\n    }\\n\\n    /**\\n     * @notice External function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18). For DAI, this is calculated from DSR and SF. Input not used.\\n     * @param gapPerYear The Additional margin per year separating the base borrow rate from the roof. (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The jumpMultiplierPerYear after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(uint baseRatePerYear, uint gapPerYear, uint jumpMultiplierPerYear, uint kink_) external {\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n        gapPerBlock = gapPerYear / blocksPerYear;\\n        updateJumpRateModelInternal(0, 0, jumpMultiplierPerYear, kink_);\\n        poke();\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block including the Dai savings rate\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\\n        uint protocolRate = super.getSupplyRate(cash, borrows, reserves, reserveFactorMantissa);\\n\\n        uint underlying = cash.add(borrows).sub(reserves);\\n        if (underlying == 0) {\\n            return protocolRate;\\n        } else {\\n            uint cashRate = cash.mul(dsrPerBlock()).div(underlying);\\n            return cashRate.add(protocolRate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the Dai savings rate per block\\n     * @return The Dai savings rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function dsrPerBlock() public view returns (uint) {\\n        return pot\\n            .dsr().sub(1e27)  // scaled 1e27 aka RAY, and includes an extra \\\"ONE\\\" before subraction\\n            .div(1e9) // descale to 1e18\\n            .mul(15); // 15 seconds per block\\n    }\\n\\n    /**\\n     * @notice Resets the baseRate and multiplier per block based on the stability fee and Dai savings rate\\n     */\\n    function poke() public {\\n        (uint duty, ) = jug.ilks(\\\"ETH-A\\\");\\n        uint stabilityFeePerBlock = duty.add(jug.base()).sub(1e27).mul(1e18).div(1e27).mul(15);\\n\\n        // We ensure the minimum borrow rate >= DSR / (1 - reserve factor)\\n        baseRatePerBlock = dsrPerBlock().mul(1e18).div(assumedOneMinusReserveFactorMantissa);\\n\\n        // The roof borrow rate is max(base rate, stability fee) + gap, from which we derive the slope\\n        if (baseRatePerBlock < stabilityFeePerBlock) {\\n            multiplierPerBlock = stabilityFeePerBlock.sub(baseRatePerBlock).add(gapPerBlock).mul(1e18).div(kink);\\n        } else {\\n            multiplierPerBlock = gapPerBlock.mul(1e18).div(kink);\\n        }\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n}\\n\\n\\n/*** Maker Interfaces ***/\\n\\ncontract PotLike {\\n    function chi() external view returns (uint);\\n    function dsr() external view returns (uint);\\n    function rho() external view returns (uint);\\n    function pie(address) external view returns (uint);\\n    function drip() external returns (uint);\\n    function join(uint) external;\\n    function exit(uint) external;\\n}\\n\\ncontract JugLike {\\n    // --- Data ---\\n    struct Ilk {\\n        uint256 duty;\\n        uint256  rho;\\n    }\\n\\n   mapping (bytes32 => Ilk) public ilks;\\n   uint256 public base;\\n}\\n\",\"keccak256\":\"0xbc1b5f3d4b15c5cda0f747667a0947261a217b8a5c6f118929c426018b6a8bfb\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x929282d73c79e6d700ebe79f9fafc1e414b3848acff5a56d6740afd1dc908678\"},\"contracts/JumpRateModelV2.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n\\n/**\\n  * @title Compound's JumpRateModel Contract V2 for V2 cTokens\\n  * @author Arr00\\n  * @notice Supports only for V2 cTokens\\n  */\\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2  {\\n\\n\\t/**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {\\n        return getBorrowRateInternal(cash, borrows, reserves);\\n    }\\n\\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) \\n    \\tBaseJumpRateModelV2(baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}\\n}\\n\",\"keccak256\":\"0x266cc648dc7835acb61e205f39eb7f6a8d7b106ae482b5f7668b81e6b2ced1e4\"},\"contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x6653e37ff57a02b7b7f20199bb0fd5685756ced19a67f53328b42c9d2167ffd2\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063b9f9850a11610066578063b9f9850a14610226578063f14039de1461022e578063f52d21f314610236578063fd2da3391461023e576100f5565b80638da5cb5b146101c357806396456c5c146101e7578063a385fb96146101ef578063b8168816146101f7576100f5565b80632191f92a116100d35780632191f92a1461016e5780636dac7cd51461018a5780636e71e2d8146101925780638726bb89146101bb576100f5565b806315f24053146100fa57806318178358146101355780632037f3e71461013f575b600080fd5b6101236004803603606081101561011057600080fd5b5080359060208101359060400135610246565b60408051918252519081900360200190f35b61013d61025d565b005b61013d6004803603608081101561015557600080fd5b508035906020810135906040810135906060013561049b565b610176610508565b604080519115158252519081900360200190f35b61012361050d565b610123600480360360608110156101a857600080fd5b5080359060208101359060400135610519565b610123610557565b6101cb61055d565b604080516001600160a01b039092168252519081900360200190f35b61012361056c565b610123610616565b6101236004803603608081101561020d57600080fd5b508035906020810135906040810135906060013561061d565b610123610691565b610123610697565b61012361069d565b6101236106a3565b60006102538484846106a9565b90505b9392505050565b60075460408051636cb1c69b60e11b8152644554482d4160d81b600482015281516000936001600160a01b03169263d9638d369260248082019391829003018186803b1580156102ac57600080fd5b505afa1580156102c0573d6000803e3d6000fd5b505050506040513d60408110156102d657600080fd5b505160075460408051635001f3b560e01b815290519293506000926103af92600f92610397926b033b2e3c9fd0803ce8000000926103a392670de0b6b3a7640000928692869261038b926001600160a01b0390921691635001f3b591600480820192602092909190829003018186803b15801561035257600080fd5b505afa158015610366573d6000803e3d6000fd5b505050506040513d602081101561037c57600080fd5b50518b9063ffffffff61076616565b9063ffffffff6107c916565b9063ffffffff61080b16565b9063ffffffff61086416565b90506103d1670d2f13f7789f00006103a3670de0b6b3a764000061039761056c565b600281905581111561041e576104166004546103a3670de0b6b3a764000061039760055461040a600254886107c990919063ffffffff16565b9063ffffffff61076616565b600155610445565b6104416004546103a3670de0b6b3a764000060055461080b90919063ffffffff16565b6001555b600254600154600354600454604080519485526020850193909352838301919091526060830152517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a15050565b6000546001600160a01b031633146104e45760405162461bcd60e51b8152600401808060200182810382526026815260200180610acc6026913960400191505060405180910390fd5b6220148083046005556104fa60008084846108a6565b61050261025d565b50505050565b600181565b670d2f13f7789f000081565b60008261052857506000610256565b61025361053f8361038b878763ffffffff61076616565b6103a385670de0b6b3a764000063ffffffff61080b16565b60015481565b6000546001600160a01b031681565b6000610611600f610397633b9aca006103a36b033b2e3c9fd0803ce8000000600660009054906101000a90046001600160a01b03166001600160a01b031663487bf0826040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d957600080fd5b505afa1580156105ed573d6000803e3d6000fd5b505050506040513d602081101561060357600080fd5b50519063ffffffff6107c916565b905090565b6220148081565b60008061062c86868686610947565b905060006106448561038b898963ffffffff61076616565b90508061065357509050610689565b6000610671826103a361066461056c565b8b9063ffffffff61080b16565b9050610683818463ffffffff61076616565b93505050505b949350505050565b60035481565b60025481565b60055481565b60045481565b6000806106b7858585610519565b905060045481116106f1576106e960025461040a670de0b6b3a76400006103a36001548661080b90919063ffffffff16565b915050610256565b600061071c60025461040a670de0b6b3a76400006103a360015460045461080b90919063ffffffff16565b90506000610735600454846107c990919063ffffffff16565b905061075c8261040a670de0b6b3a76400006103a36003548661080b90919063ffffffff16565b9350505050610256565b6000828201838110156107c0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006107c083836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506109ae565b60008261081a575060006107c3565b8282028284828161082757fe5b04146107c05760405162461bcd60e51b8152600401808060200182810382526021815260200180610aab6021913960400191505060405180910390fd5b60006107c083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a45565b6108b9846220148063ffffffff61086416565b6002556108d261053f622014808363ffffffff61080b16565b6001556108e8826220148063ffffffff61086416565b60038190556004829055600254600154604080519283526020830191909152818101929092526060810183905290517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9181900360800190a150505050565b600080610962670de0b6b3a76400008463ffffffff6107c916565b905060006109718787876106a9565b90506000610991670de0b6b3a76400006103a3848663ffffffff61080b16565b9050610683670de0b6b3a76400006103a3836103978c8c8c610519565b60008184841115610a3d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a025781810151838201526020016109ea565b50505050905090810190601f168015610a2f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183610a945760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610a025781810151838201526020016109ea565b506000838581610aa057fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e6374696f6e2ea265627a7a72315820c5b2199975e38710bec213de83b73b50ffa802b0f0c48809fbb870a41c3883a564736f6c63430005110032",
  "devdoc": {
    "author": "Compound (modified by Dharma Labs)",
    "methods": {
      "constructor": {
        "params": {
          "jug_": "The address of the Dai jug (where SF is kept)",
          "jumpMultiplierPerYear": "The multiplierPerBlock after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied",
          "owner_": "The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)",
          "pot_": "The address of the Dai pot (where DSR is earned)"
        }
      },
      "dsrPerBlock()": {
        "return": "The Dai savings rate per block (as a percentage, and scaled by 1e18)"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "return": "The borrow rate percentage per block as a mantissa (scaled by 1e18)"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "borrows": "The total amount of borrows the market has outstanding",
          "cash": "The total amount of cash the market has",
          "reserveFactorMantissa": "The current reserve factor the market has",
          "reserves": "The total amnount of reserves the market has"
        },
        "return": "The supply rate per block (as a percentage, and scaled by 1e18)"
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by 1e18). For DAI, this is calculated from DSR and SF. Input not used.",
          "gapPerYear": "The Additional margin per year separating the base borrow rate from the roof. (scaled by 1e18)",
          "jumpMultiplierPerYear": "The jumpMultiplierPerYear after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied"
        }
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "return": "The utilization rate as a mantissa between [0, 1e18]"
      }
    },
    "title": "Compound's DAIInterestRateModel Contract (version 3)"
  },
  "userdoc": {
    "methods": {
      "constructor": "Construct an interest rate model",
      "dsrPerBlock()": {
        "notice": "Calculates the Dai savings rate per block"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per block"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply interest rate per block including the Dai savings rate"
      },
      "poke()": {
        "notice": "Resets the baseRate and multiplier per block based on the stability fee and Dai savings rate"
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "notice": "External function to update the parameters of the interest rate model"
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
      }
    },
    "notice": "The parameterized model described in section 2.4 of the original Compound Protocol whitepaper. Version 3 modifies the interest rate model in Version 2 by increasing the initial \"gap\" or slope of the model prior to the \"kink\" from 2% to 4%, and enabling updateable parameters."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "multiplierPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "baseRatePerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "jumpMultiplierPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 28,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "kink",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11004,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "gapPerBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11009,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "pot",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(PotLike)11287"
      },
      {
        "astId": 11011,
        "contract": "contracts/DAIInterestRateModelV3.sol:DAIInterestRateModelV3",
        "label": "jug",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(JugLike)11299"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(JugLike)11299": {
        "encoding": "inplace",
        "label": "contract JugLike",
        "numberOfBytes": "20"
      },
      "t_contract(PotLike)11287": {
        "encoding": "inplace",
        "label": "contract PotLike",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}